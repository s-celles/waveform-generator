/**
 * @file xy_art.h
 * @brief XY Waveform library for oscilloscope art
 * @author XY Waveform Generator Script
 * @date Generated automatically using Python script from https://github.com/s-celles/waveform-generator/
 * 
 * This file contains 4 XY pattern pairs for 8-bit DACs.
 * Perfect for oscilloscope XY mode, dual DAC output, or vector displays.
 * 
 * Hardware setup:
 * - Connect DAC1 to oscilloscope X input
 * - Connect DAC2 to oscilloscope Y input  
 * - Set oscilloscope to XY mode
 * - Enjoy the patterns!
 * 
 * Usage example:
 *   #include "xy_art.h"
 *   
 *   for(int i = 0; i < XY_ARRAY_SIZE; i++) {
 *       dac1_output(heart_x[i]);     // X coordinate
 *       dac2_output(heart_y[i]);     // Y coordinate
 *       delay_us(100);
 *   }
 */

#ifndef XY_WAVEFORMS_H
#define XY_WAVEFORMS_H

#include <stdint.h>

// Configuration constants
#define XY_ARRAY_SIZE 256
#define XY_BITS 8
#define XY_MAX_VALUE 255
#define XY_CENTER 127

//=============================================================================
// XY PATTERN DATA
//=============================================================================

/**
 * @brief Mathematical heart ‚ù§Ô∏è
 */
const uint8_t heart_x[XY_ARRAY_SIZE] = {
  128, 128, 128, 128, 128, 128, 128, 129, 129, 130, 130, 131, 132, 134, 135, 137,
  139, 141, 143, 146, 149, 152, 155, 159, 162, 166, 171, 175, 180, 184, 189, 194,
  200, 205, 210, 216, 222, 227, 233, 239, 245, 251, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 251, 245, 239, 233, 227, 222, 216, 210, 205,
  200, 194, 189, 184, 180, 175, 171, 166, 162, 159, 155, 152, 149, 146, 143, 141,
  139, 137, 135, 134, 132, 131, 130, 130, 129, 129, 128, 128, 128, 128, 128, 128,
  128, 127, 127, 127, 127, 127, 127, 126, 126, 125, 125, 124, 123, 121, 120, 118,
  116, 114, 112, 109, 106, 103, 100,  96,  93,  89,  84,  80,  75,  71,  66,  61,
   55,  50,  45,  39,  33,  28,  22,  16,  10,   4,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   4,  10,  16,  22,  28,  33,  39,  45,  50,
   55,  61,  66,  71,  75,  80,  84,  89,  93,  96, 100, 103, 106, 109, 112, 114,
  116, 118, 120, 121, 123, 124, 125, 125, 126, 126, 127, 127, 127, 127, 127, 127
};

const uint8_t heart_y[XY_ARRAY_SIZE] = {
  191, 191, 192, 193, 194, 195, 197, 199, 201, 203, 206, 209, 212, 215, 219, 222,
  226, 229, 233, 237, 241, 244, 248, 251, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 252, 248, 243, 239, 234, 229, 224, 219, 213, 208, 202, 196, 190, 184,
  179, 173, 167, 161, 155, 149, 143, 137, 131, 125, 119, 113, 108, 102,  97,  91,
   86,  80,  75,  70,  64,  59,  54,  49,  44,  39,  34,  29,  24,  19,  14,  10,
    5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    5,  10,  14,  19,  24,  29,  34,  39,  44,  49,  54,  59,  64,  70,  75,  80,
   86,  91,  97, 102, 108, 113, 119, 125, 131, 137, 143, 149, 155, 161, 167, 173,
  178, 184, 190, 196, 202, 208, 213, 219, 224, 229, 234, 239, 243, 248, 252, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255,
  255, 255, 255, 255, 255, 255, 255, 255, 255, 251, 248, 244, 241, 237, 233, 229,
  226, 222, 219, 215, 212, 209, 206, 203, 201, 199, 197, 195, 194, 193, 192, 191
};

/**
 * @brief 5-petal rose üåπ
 */
const uint8_t rose_5_x[XY_ARRAY_SIZE] = {
  230, 229, 226, 222, 217, 210, 202, 193, 183, 172, 161, 149, 137, 125, 113, 102,
   91,  82,  73,  65,  58,  53,  48,  46,  44,  44,  46,  48,  52,  57,  63,  69,
   76,  84,  92, 101, 109, 117, 125, 132, 139, 145, 150, 154, 158, 161, 163, 163,
  164, 163, 161, 159, 157, 154, 151, 147, 144, 141, 138, 135, 132, 130, 129, 128,
  128, 128, 129, 130, 132, 135, 138, 141, 144, 147, 151, 154, 157, 159, 161, 163,
  164, 163, 163, 161, 158, 154, 150, 145, 139, 132, 125, 117, 109, 101,  92,  84,
   77,  69,  63,  57,  52,  48,  46,  44,  44,  46,  48,  53,  58,  65,  73,  82,
   91, 102, 113, 125, 137, 149, 161, 172, 183, 193, 202, 210, 217, 222, 226, 229,
  230, 229, 226, 222, 217, 210, 202, 193, 183, 172, 161, 149, 137, 125, 113, 102,
   91,  82,  73,  65,  58,  53,  48,  46,  44,  44,  46,  48,  52,  57,  63,  69,
   76,  84,  92, 101, 109, 117, 125, 132, 139, 145, 150, 154, 158, 161, 163, 163,
  164, 163, 161, 159, 157, 154, 151, 147, 144, 141, 138, 135, 132, 130, 129, 128,
  128, 128, 129, 130, 132, 135, 138, 141, 144, 147, 151, 154, 157, 159, 161, 163,
  164, 163, 163, 161, 158, 154, 150, 145, 139, 132, 125, 117, 109, 101,  92,  84,
   77,  69,  63,  57,  52,  48,  46,  44,  44,  46,  48,  53,  58,  65,  73,  82,
   91, 102, 113, 125, 137, 149, 161, 172, 183, 193, 202, 210, 217, 222, 226, 229
};

const uint8_t rose_5_y[XY_ARRAY_SIZE] = {
  128, 130, 132, 135, 136, 138, 139, 139, 139, 138, 136, 133, 130, 127, 122, 118,
  113, 107, 102,  96,  90,  85,  80,  76,  72,  69,  67,  66,  66,  67,  69,  72,
   76,  82,  89,  96, 105, 114, 123, 134, 144, 155, 165, 175, 185, 193, 202, 209,
  215, 219, 222, 224, 225, 223, 221, 216, 211, 204, 195, 186, 175, 164, 152, 140,
  128, 115, 103,  91,  80,  69,  60,  51,  44,  39,  34,  32,  30,  31,  33,  36,
   40,  46,  53,  62,  70,  80,  90, 100, 111, 121, 132, 141, 150, 159, 166, 173,
  178, 183, 186, 188, 189, 189, 188, 186, 183, 179, 175, 170, 165, 159, 153, 148,
  142, 137, 133, 128, 125, 122, 119, 117, 116, 116, 116, 117, 119, 120, 123, 125,
  127, 130, 132, 135, 136, 138, 139, 139, 139, 138, 136, 133, 130, 127, 122, 118,
  113, 107, 102,  96,  90,  85,  80,  76,  72,  69,  67,  66,  66,  67,  69,  72,
   77,  82,  89,  96, 105, 114, 123, 134, 144, 155, 165, 175, 185, 193, 202, 209,
  215, 219, 222, 224, 225, 223, 221, 216, 211, 204, 195, 186, 175, 164, 152, 140,
  128, 115, 103,  91,  80,  69,  60,  51,  44,  39,  34,  32,  30,  31,  33,  36,
   40,  46,  53,  62,  70,  80,  90, 100, 111, 121, 132, 141, 150, 159, 166, 173,
  178, 183, 186, 188, 189, 189, 188, 186, 183, 179, 175, 170, 165, 159, 153, 148,
  142, 137, 133, 128, 125, 122, 119, 117, 116, 116, 116, 117, 119, 120, 123, 125
};

/**
 * @brief Butterfly curve ü¶ã
 */
const uint8_t butterfly_x[XY_ARRAY_SIZE] = {
  128, 128, 129, 130, 131, 132, 133, 135, 137, 139, 142, 145, 148, 152, 156, 160,
  164, 169, 174, 179, 185, 190, 196, 201, 206, 211, 216, 221, 225, 229, 232, 234,
  236, 238, 239, 239, 238, 236, 234, 231, 228, 224, 219, 213, 207, 201, 194, 187,
  179, 172, 164, 156, 148, 141, 134, 127, 120, 114, 108, 103,  99,  96,  93,  91,
   89,  89,  89,  90,  92,  94,  97, 101, 105, 110, 115, 121, 127, 133, 139, 145,
  152, 158, 164, 169, 174, 179, 184, 187, 191, 193, 196, 197, 198, 198, 198, 197,
  195, 193, 190, 187, 184, 180, 176, 171, 167, 162, 158, 153, 149, 145, 140, 137,
  133, 130, 127, 125, 123, 122, 121, 120, 120, 120, 120, 121, 122, 123, 125, 126,
  127, 129, 130, 132, 133, 134, 135, 135, 135, 135, 134, 133, 132, 130, 128, 125,
  122, 118, 115, 111, 106, 102,  97,  93,  88,  84,  79,  75,  72,  68,  65,  62,
   60,  59,  58,  57,  57,  58,  60,  62,  64,  68,  72,  76,  81,  86,  92,  98,
  104, 110, 116, 122, 128, 134, 140, 145, 150, 154, 158, 161, 164, 165, 166, 167,
  166, 165, 163, 160, 156, 152, 147, 141, 135, 129, 122, 115, 107,  99,  92,  84,
   76,  69,  61,  55,  48,  42,  37,  32,  28,  24,  21,  19,  18,  17,  17,  18,
   19,  21,  24,  27,  31,  35,  39,  44,  49,  54,  60,  65,  71,  76,  81,  86,
   91,  96, 100, 104, 107, 111, 114, 116, 118, 120, 122, 123, 124, 125, 126, 127
};

const uint8_t butterfly_y[XY_ARRAY_SIZE] = {
  155, 155, 156, 158, 160, 163, 166, 170, 174, 179, 184, 189, 195, 200, 206, 211,
  217, 222, 226, 231, 235, 238, 241, 244, 246, 247, 247, 247, 246, 245, 243, 240,
  236, 233, 228, 223, 218, 213, 207, 201, 195, 188, 182, 176, 170, 164, 159, 154,
  149, 145, 141, 137, 134, 131, 129, 127, 126, 125, 125, 125, 125, 125, 126, 127,
  128, 128, 129, 130, 131, 132, 132, 132, 132, 131, 131, 129, 128, 126, 123, 121,
  118, 114, 110, 107, 102,  98,  94,  90,  85,  81,  77,  73,  70,  67,  64,  62,
   60,  59,  58,  58,  59,  61,  63,  65,  69,  73,  77,  82,  88,  94, 100, 107,
  113, 120, 128, 135, 141, 148, 155, 161, 167, 172, 176, 180, 184, 186, 188, 190,
  190, 190, 188, 186, 184, 180, 176, 172, 167, 161, 155, 148, 142, 135, 128, 121,
  114, 107, 100,  94,  88,  82,  77,  73,  69,  65,  63,  61,  59,  59,  58,  59,
   60,  62,  64,  67,  70,  73,  77,  81,  85,  90,  94,  98, 103, 107, 111, 114,
  118, 121, 123, 126, 128, 129, 131, 131, 132, 132, 132, 132, 131, 130, 129, 128,
  128, 127, 126, 125, 125, 124, 125, 125, 126, 127, 129, 131, 134, 137, 140, 144,
  149, 154, 159, 164, 170, 176, 182, 188, 194, 200, 206, 212, 218, 223, 228, 232,
  236, 239, 242, 244, 246, 246, 247, 246, 245, 243, 241, 238, 234, 230, 226, 221,
  216, 210, 205, 199, 194, 188, 183, 178, 173, 169, 165, 162, 159, 157, 155, 154
};

/**
 * @brief Lissajous 3:2
 */
const uint8_t lissajous_3_2_x[XY_ARRAY_SIZE] = {
  128, 135, 142, 150, 157, 164, 171, 178, 184, 190, 196, 201, 206, 211, 215, 219,
  222, 224, 226, 228, 229, 229, 229, 229, 228, 226, 224, 221, 217, 214, 209, 205,
  200, 194, 188, 182, 176, 169, 162, 155, 147, 140, 133, 125, 118, 110, 103,  96,
   88,  82,  75,  69,  63,  57,  52,  47,  43,  39,  35,  32,  30,  28,  27,  26,
   25,  26,  27,  28,  30,  32,  35,  39,  43,  47,  52,  57,  63,  69,  75,  82,
   88,  96, 103, 110, 118, 125, 133, 140, 147, 155, 162, 169, 176, 182, 188, 194,
  200, 205, 209, 214, 217, 221, 224, 226, 228, 229, 229, 229, 229, 228, 226, 224,
  222, 219, 215, 211, 206, 201, 196, 190, 184, 178, 171, 164, 157, 150, 142, 135,
  128, 120, 113, 105,  98,  91,  84,  77,  71,  65,  59,  54,  49,  44,  40,  36,
   33,  31,  29,  27,  26,  26,  26,  26,  27,  29,  31,  34,  38,  41,  46,  50,
   55,  61,  67,  73,  79,  86,  93, 100, 108, 115, 122, 130, 137, 145, 152, 159,
  167, 173, 180, 186, 192, 198, 203, 208, 212, 216, 220, 223, 225, 227, 228, 229,
  230, 229, 228, 227, 225, 223, 220, 216, 212, 208, 203, 198, 192, 186, 180, 173,
  167, 159, 152, 145, 137, 130, 122, 115, 108, 100,  93,  86,  79,  73,  67,  61,
   55,  50,  46,  41,  38,  34,  31,  29,  27,  26,  26,  26,  26,  27,  29,  31,
   33,  36,  40,  44,  49,  54,  59,  65,  71,  77,  84,  91,  98, 105, 113, 120
};

const uint8_t lissajous_3_2_y[XY_ARRAY_SIZE] = {
  128, 133, 137, 142, 147, 152, 157, 162, 167, 171, 176, 180, 184, 188, 192, 196,
  200, 203, 206, 209, 212, 215, 217, 220, 222, 224, 225, 226, 228, 228, 229, 229,
  230, 229, 229, 228, 228, 226, 225, 224, 222, 220, 217, 215, 212, 209, 206, 203,
  200, 196, 192, 188, 184, 180, 176, 171, 167, 162, 157, 152, 147, 142, 137, 133,
  128, 122, 118, 113, 108, 103,  98,  93,  88,  84,  79,  75,  71,  67,  63,  59,
   55,  52,  49,  46,  43,  40,  38,  35,  33,  31,  30,  29,  27,  27,  26,  26,
   25,  26,  26,  27,  27,  29,  30,  31,  33,  35,  38,  40,  43,  46,  49,  52,
   55,  59,  63,  67,  71,  75,  79,  84,  88,  93,  98, 103, 108, 113, 118, 122,
  127, 133, 137, 142, 147, 152, 157, 162, 167, 171, 176, 180, 184, 188, 192, 196,
  200, 203, 206, 209, 212, 215, 217, 220, 222, 224, 225, 226, 228, 228, 229, 229,
  230, 229, 229, 228, 228, 226, 225, 224, 222, 220, 217, 215, 212, 209, 206, 203,
  200, 196, 192, 188, 184, 180, 176, 171, 167, 162, 157, 152, 147, 142, 137, 133,
  128, 122, 118, 113, 108, 103,  98,  93,  88,  84,  79,  75,  71,  67,  63,  59,
   55,  52,  49,  46,  43,  40,  38,  35,  33,  31,  30,  29,  27,  27,  26,  26,
   25,  26,  26,  27,  27,  29,  30,  31,  33,  35,  38,  40,  43,  46,  49,  52,
   55,  59,  63,  67,  71,  75,  79,  84,  88,  93,  98, 103, 108, 113, 118, 122
};

//=============================================================================
// UTILITY ENUMS AND ARRAYS
//=============================================================================

/**
 * @brief XY Pattern type enumeration
 */
typedef enum {
    XY_HEART = 0,
    XY_ROSE_5 = 1,
    XY_BUTTERFLY = 2,
    XY_LISSAJOUS_3_2 = 3,
    XY_PATTERN_COUNT = 4  // Total number of patterns
} xy_pattern_type_t;

/**
 * @brief XY coordinate structure
 */
typedef struct {
    uint8_t x;
    uint8_t y;
} xy_point_t;

/**
 * @brief Array of X coordinate pointers
 */
const uint8_t* const xy_patterns_x[XY_PATTERN_COUNT] = {
    heart_x,
    rose_5_x,
    butterfly_x,
    lissajous_3_2_x,
};

/**
 * @brief Array of Y coordinate pointers  
 */
const uint8_t* const xy_patterns_y[XY_PATTERN_COUNT] = {
    heart_y,
    rose_5_y,
    butterfly_y,
    lissajous_3_2_y,
};

/**
 * @brief Pattern names for debugging/display
 */
const char* const xy_pattern_names[XY_PATTERN_COUNT] = {
    "Heart",
    "Rose 5",
    "Butterfly",
    "Lissajous 3 2",
};

/**
 * @brief Get XY coordinates at specific index
 * @param pattern Pattern type (0 to XY_PATTERN_COUNT-1)
 * @param index Sample index (0 to XY_ARRAY_SIZE-1)
 * @return XY point structure with coordinates
 */
static inline xy_point_t get_xy_point(xy_pattern_type_t pattern, uint16_t index) {
    xy_point_t point = {XY_CENTER, XY_CENTER};
    if (pattern < XY_PATTERN_COUNT && index < XY_ARRAY_SIZE) {
        point.x = xy_patterns_x[pattern][index];
        point.y = xy_patterns_y[pattern][index];
    }
    return point;
}

/**
 * @brief Output XY pattern to dual DACs
 * @param pattern Pattern to output
 * @param dac_x_func Function pointer for X DAC output
 * @param dac_y_func Function pointer for Y DAC output
 * @param delay_us Delay between samples in microseconds
 */
static inline void output_xy_pattern(xy_pattern_type_t pattern,
                                   void (*dac_x_func)(uint8_t),
                                   void (*dac_y_func)(uint8_t),
                                   uint16_t delay_us) {
    for (uint16_t i = 0; i < XY_ARRAY_SIZE; i++) {
        xy_point_t point = get_xy_point(pattern, i);
        dac_x_func(point.x);
        dac_y_func(point.y);
        // delay_microseconds(delay_us);  // Implement your delay function
    }
}

#endif // XY_WAVEFORMS_H

/*
 * Generated with XY Waveform Generator:
 * - Bits: 8
 * - Array size: 256
 * - Data type: uint8_t
 * - Value range: 0-255
 * - Patterns: 4
 * 
 * Perfect for oscilloscope art and vector displays!
 */