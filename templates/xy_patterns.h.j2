/**
 * @file {{ filename }}
 * @brief XY Waveform library for oscilloscope art
 * @author XY Waveform Generator Script
 * @date Generated automatically using Python script from https://github.com/s-celles/waveform-generator/
 * 
 * This file contains {{ patterns|length }} XY pattern pairs for {{ bits }}-bit DACs.
 * Perfect for oscilloscope XY mode, dual DAC output, or vector displays.
 * 
 * Hardware setup:
 * - Connect DAC1 to oscilloscope X input
 * - Connect DAC2 to oscilloscope Y input  
 * - Set oscilloscope to XY mode
 * - Enjoy the patterns!
 * 
 * Usage example:
 *   #include "{{ filename }}"
 *   
 *   for(int i = 0; i < XY_ARRAY_SIZE; i++) {
 *       dac1_output(heart_x[i]);     // X coordinate
 *       dac2_output(heart_y[i]);     // Y coordinate
 *       delay_us(100);
 *   }
 */

#ifndef XY_WAVEFORMS_H
#define XY_WAVEFORMS_H

#include <stdint.h>

// Configuration constants
#define XY_ARRAY_SIZE {{ array_size }}
#define XY_BITS {{ bits }}
#define XY_MAX_VALUE {{ max_value }}
#define XY_CENTER {{ center }}

typedef enum {
    XY_OK = 0,
    XY_NULL_POINTER_ERROR,
} xy_status_t;

//=============================================================================
// XY PATTERN DATA
//=============================================================================

{% for name, pattern_data in patterns.items() %}
/**
 * @brief {{ pattern_data.description }}
 */
const {{ data_type }} {{ name }}_x[XY_ARRAY_SIZE] = {
{%- for chunk in pattern_data.x_data | batch(16) %}
  {% for value in chunk %}{{ "%{}d".format(max_value|string|length) | format(value) }}{% if not loop.last %}, {% endif %}{% endfor %}{% if not loop.last %},{% endif %}
{%- endfor %}
};

const {{ data_type }} {{ name }}_y[XY_ARRAY_SIZE] = {
{%- for chunk in pattern_data.y_data | batch(16) %}
  {% for value in chunk %}{{ "%{}d".format(max_value|string|length) | format(value) }}{% if not loop.last %}, {% endif %}{% endfor %}{% if not loop.last %},{% endif %}
{%- endfor %}
};

{% endfor %}

//=============================================================================
// UTILITY ENUMS AND ARRAYS
//=============================================================================

/**
 * @brief XY Pattern type enumeration
 */
typedef enum {
{%- for name in patterns.keys() %}
    XY_{{ name.upper() }} = {{ loop.index0 }},
{%- endfor %}
    XY_PATTERN_COUNT = {{ patterns|length }}  // Total number of patterns
} xy_pattern_type_t;

/**
 * @brief XY coordinate structure
 */
typedef struct {
    {{ data_type }} x;
    {{ data_type }} y;
} xy_point_t;

/**
 * @brief Array of X coordinate pointers
 */
const {{ data_type }}* const xy_patterns_x[XY_PATTERN_COUNT] = {
{%- for name in patterns.keys() %}
    {{ name }}_x,
{%- endfor %}
};

/**
 * @brief Array of Y coordinate pointers  
 */
const {{ data_type }}* const xy_patterns_y[XY_PATTERN_COUNT] = {
{%- for name in patterns.keys() %}
    {{ name }}_y,
{%- endfor %}
};

/**
 * @brief Pattern names for debugging/display
 */
const char* const xy_pattern_names[XY_PATTERN_COUNT] = {
{%- for name in patterns.keys() %}
    "{{ name.replace('_', ' ').title() }}",
{%- endfor %}
};

/**
 * @brief Get XY coordinates at specific index
 * @param pattern Pattern type (0 to XY_PATTERN_COUNT-1)
 * @param index Sample index (0 to XY_ARRAY_SIZE-1)
 * @return XY point structure with coordinates
 */
static inline xy_point_t get_xy_point(xy_pattern_type_t pattern, uint16_t index) {
    xy_point_t point = {XY_CENTER, XY_CENTER};
    if (pattern < XY_PATTERN_COUNT && index < XY_ARRAY_SIZE) {
        point.x = xy_patterns_x[pattern][index];
        point.y = xy_patterns_y[pattern][index];
    }
    return point;
}

/**
 * @brief Output XY pattern to dual DACs
 * @param pattern Pattern to output
 * @param dac_x_func Function pointer for X DAC output
 * @param dac_y_func Function pointer for Y DAC output
 * @param delay_us Delay between samples in microseconds
 */
static inline xy_status_t output_xy_pattern(xy_pattern_type_t pattern,
                                   void (*dac_x_func)({{ data_type }}),
                                   void (*dac_y_func)({{ data_type }}),
                                   uint16_t delay_us) {
    if (dac_x_func == NULL || dac_y_func == NULL) {
        return XY_NULL_POINTER_ERROR;
    }
    for (uint16_t i = 0; i < XY_ARRAY_SIZE; i++) {
        xy_point_t point = get_xy_point(pattern, i);
        dac_x_func(point.x);
        dac_y_func(point.y);
        // delay_microseconds(delay_us);  // Implement your delay function
    }
    return XY_OK;
}

#endif // XY_WAVEFORMS_H

/*
 * Generated with XY Waveform Generator:
 * - Bits: {{ bits }}
 * - Array size: {{ array_size }}
 * - Data type: {{ data_type }}
 * - Value range: 0-{{ max_value }}
 * - Patterns: {{ patterns|length }}
 * 
 * Perfect for oscilloscope art and vector displays!
 */